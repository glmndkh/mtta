Quick checks (do these first)

Are your styles keyed to the right selector?

Tailwind “dark mode” expects the dark class on <html> (or media mode), not a data-theme attribute.

DaisyUI expects data-theme="dark"/"light" on <html> (or on a container).
If your CSS is looking for .dark but you only set data-theme, nothing will change.

Is <ThemeProvider> actually wrapping your app?
If not, useTheme() works but nothing writes to <html> on mount.

Check the DOM live:
In DevTools console, run:

document.documentElement.getAttribute('data-theme');
document.documentElement.classList.contains('dark');
localStorage.getItem('mtta-theme');


Ensure these reflect what you expect after toggling.

Iframe/localStorage quirks:
Some sandboxes/iframes can block or isolate localStorage. If localStorage errors in dev tools, remove it temporarily and see if toggling begins to work.

A hardened, drop-in version (supports Tailwind “dark” and DaisyUI)

This writes both the data-theme attribute and the dark class on <html>, handles SSR/iframe quirks, and avoids FOUC flicker:

import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';

type Theme = 'dark' | 'light';

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
  setTheme: (t: Theme) => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

// Util: safely read localStorage (won't crash SSR/iframe)
function safeGet(key: string): string | null {
  try { return typeof window !== 'undefined' ? window.localStorage.getItem(key) : null; } catch { return null; }
}
function safeSet(key: string, val: string) {
  try { if (typeof window !== 'undefined') window.localStorage.setItem(key, val); } catch { /* ignore */ }
}

// Apply to <html>: both data-theme and .dark class for broad compatibility
function applyThemeToDocument(t: Theme) {
  if (typeof document === 'undefined') return;
  const el = document.documentElement;
  el.setAttribute('data-theme', t);          // DaisyUI, custom CSS vars
  el.classList.toggle('dark', t === 'dark'); // Tailwind dark mode (class strategy)
}

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  // 1) Initial theme: try persisted, else system preference, else 'dark'
  const [theme, setTheme] = useState<Theme>(() => {
    const saved = safeGet('mtta-theme');
    if (saved === 'dark' || saved === 'light') return saved;
    if (typeof window !== 'undefined' && window.matchMedia?.('(prefers-color-scheme: light)').matches) {
      return 'light';
    }
    return 'dark';
  });

  // 2) On mount: ensure DOM reflects initial state immediately
  useEffect(() => {
    applyThemeToDocument(theme);
  }, []); // run once so first paint is correct

  // 3) Whenever theme changes: persist + apply
  useEffect(() => {
    safeSet('mtta-theme', theme);
    applyThemeToDocument(theme);
    // Nudge CSS var if you rely on it for debugging/forcing recompute
    document?.documentElement.style.setProperty('--theme-debug', theme);
  }, [theme]);

  const toggleTheme = () => setTheme((t) => (t === 'dark' ? 'light' : 'dark'));

  const value = useMemo(() => ({ theme, toggleTheme, setTheme }), [theme]);

  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;
}

export function useTheme() {
  const ctx = useContext(ThemeContext);
  if (!ctx) throw new Error('useTheme must be used within a ThemeProvider');
  return ctx;
}

How to wire it up

Wrap your app root:

import { ThemeProvider } from './ThemeProvider';
export default function App() {
  return (
    <ThemeProvider>
      <RootRoutes />
    </ThemeProvider>
  );
}


Example toggle button:

import { useTheme } from './ThemeProvider';

export function ThemeToggle() {
  const { theme, toggleTheme } = useTheme();
  return <button onClick={toggleTheme}>Skin: {theme}</button>;
}

If it’s still “not changing”

Your CSS may not be targeting correctly.

Tailwind config: darkMode: 'class' and rely on .dark.

DaisyUI: ensure themes include "dark" and "light", and your components actually react to data-theme.

Scoped attribute issue: If you put data-theme on <div id="root">, but your components/styles look at <html>, move it to document.documentElement (as above).

Third-party UI libs: Some read theme once at mount. Ensure you apply the attribute/class before first paint (the code above does this).

You’re building fast—this makes the switch bulletproof. If you paste this provider in and your CSS is pointed at either [data-theme="dark"] or .dark, the skin will flip reliably.